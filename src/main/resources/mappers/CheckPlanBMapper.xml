<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.sb.dao.checkplanb.CheckPlanBMapper">

  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from `sb_check_plan_b`
    where `id` = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.sb.dao.checkplanb.model.CheckPlanBExample">
    delete from `sb_check_plan_b`
    <if test="_parameter != null">
      <include refid="Example_Where_Clause"/>
    </if>
  </delete>
  <insert id="insert" parameterType="com.sb.dao.checkplanb.model.CheckPlanB">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into `sb_check_plan_b` (
    `check_plan_id`,
    `is_check`,
    `action_id`,
    `before_action_id`,
    `frequency`,
    `bill_type_id`
    )
    values (
    #{checkPlanId,jdbcType=INTEGER},
    #{isCheck,jdbcType=BIT},
    #{actionId,jdbcType=INTEGER},
    #{beforeActionId,jdbcType=INTEGER},
    #{frequency,jdbcType=INTEGER},
    #{billTypeId,jdbcType=INTEGER}
    )
  </insert>
  <insert id="insertSelective" parameterType="com.sb.dao.checkplanb.model.CheckPlanB">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into `sb_check_plan_b`
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="checkPlanId != null">
        `check_plan_id`,
      </if>
      <if test="isCheck != null">
        `is_check`,
      </if>
      <if test="actionId != null">
        `action_id`,
      </if>
      <if test="beforeActionId != null">
        `before_action_id`,
      </if>
      <if test="frequency != null">
        `frequency`,
      </if>
      <if test="billTypeId != null">
        `bill_type_id`,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="checkPlanId != null">
        #{checkPlanId,jdbcType=INTEGER},
      </if>
      <if test="isCheck != null">
        #{isCheck,jdbcType=BIT},
      </if>
      <if test="actionId != null">
        #{actionId,jdbcType=INTEGER},
      </if>
      <if test="beforeActionId != null">
        #{beforeActionId,jdbcType=INTEGER},
      </if>
      <if test="frequency != null">
        #{frequency,jdbcType=INTEGER},
      </if>
      <if test="billTypeId != null">
        #{billTypeId,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <resultMap id="BaseResultMap" type="com.sb.dao.checkplanb.model.CheckPlanB">
    <id column="id" jdbcType="INTEGER" property="id"/>
    <result column="check_plan_id" jdbcType="INTEGER" property="checkPlanId"/>
    <result column="is_check" jdbcType="BIT" property="isCheck"/>
    <result column="action_id" jdbcType="INTEGER" property="actionId"/>
    <result column="before_action_id" jdbcType="INTEGER" property="beforeActionId"/>
    <result column="frequency" jdbcType="INTEGER" property="frequency"/>
    <result column="bill_type_id" jdbcType="INTEGER" property="billTypeId"/>
  </resultMap>
  <select id="selectByExample" parameterType="com.sb.dao.checkplanb.model.CheckPlanBExample"
    resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <if test="_parameter != null">
      <include refid="Example_Where_Clause"/>
    </if>
    from `sb_check_plan_b`
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <include refid="Base_Column_List"/>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List"/>
    from `sb_check_plan_b`
    where `id` = #{id,jdbcType=INTEGER}
  </select>
  <select id="countByExample" parameterType="com.sb.dao.checkplanb.model.CheckPlanBExample"
    resultType="java.lang.Integer">
    select count(*) from `sb_check_plan_b`
    <if test="_parameter != null">
      <include refid="Example_Where_Clause"/>
    </if>
  </select>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="("
                    separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="("
                    separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    `id`, `check_plan_id`, `is_check`, `action_id`, `before_action_id`, `frequency`, `bill_type_id`
  </sql>
  <update id="updateByExampleSelective" parameterType="map">
    update `sb_check_plan_b`
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause"/>
    </if>
    <set>
      <if test="record.checkPlanId != null">
        `check_plan_id` = #{record.checkPlanId,jdbcType=INTEGER},
      </if>
      <if test="record.isCheck != null">
        `is_check` = #{record.isCheck,jdbcType=BIT},
      </if>
      <if test="record.actionId != null">
        `action_id` = #{record.actionId,jdbcType=INTEGER},
      </if>
      <if test="record.beforeActionId != null">
        `before_action_id` = #{record.beforeActionId,jdbcType=INTEGER},
      </if>
      <if test="record.frequency != null">
        `frequency` = #{record.frequency,jdbcType=INTEGER},
      </if>
      <if test="record.billTypeId != null">
        `bill_type_id` = #{record.billTypeId,jdbcType=INTEGER}
      </if>
    </set>
  </update>
  <update id="updateByExample" parameterType="map">
    update `sb_check_plan_b`
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause"/>
    </if>
    <set>
      `check_plan_id` = #{record.checkPlanId,jdbcType=INTEGER},
      `is_check` = #{record.isCheck,jdbcType=BIT},
      `action_id` = #{record.actionId,jdbcType=INTEGER},
      `before_action_id` = #{record.beforeActionId,jdbcType=INTEGER},
      `frequency` = #{record.frequency,jdbcType=INTEGER},
      `bill_type_id` = #{record.billTypeId,jdbcType=INTEGER}
    </set>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.sb.dao.checkplanb.model.CheckPlanB">
    update `sb_check_plan_b`
    <set>
      <if test="checkPlanId != null">
        `check_plan_id` = #{checkPlanId,jdbcType=INTEGER},
      </if>
      <if test="isCheck != null">
        `is_check` = #{isCheck,jdbcType=BIT},
      </if>
      <if test="actionId != null">
        `action_id` = #{actionId,jdbcType=INTEGER},
      </if>
      <if test="beforeActionId != null">
        `before_action_id` = #{beforeActionId,jdbcType=INTEGER},
      </if>
      <if test="frequency != null">
        `frequency` = #{frequency,jdbcType=INTEGER},
      </if>
      <if test="billTypeId != null">
        `bill_type_id` = #{billTypeId,jdbcType=INTEGER}
      </if>
    </set>
    where `id` = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.sb.dao.checkplanb.model.CheckPlanB">
    update `sb_check_plan_b`
    <set>
      `check_plan_id` = #{checkPlanId,jdbcType=INTEGER},
      `is_check` = #{isCheck,jdbcType=BIT},
      `action_id` = #{actionId,jdbcType=INTEGER},
      `before_action_id` = #{beforeActionId,jdbcType=INTEGER},
      `frequency` = #{frequency,jdbcType=INTEGER},
      `bill_type_id` = #{billTypeId,jdbcType=INTEGER}
    </set>
    where `id` = #{id,jdbcType=INTEGER}
  </update>
</mapper>
