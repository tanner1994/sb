<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.sb.dao.interest.InterestMapper">

  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from `sb_interest`
    where `id` = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.sb.dao.interest.model.InterestExample">
    delete from `sb_interest`
    <if test="_parameter != null">
      <include refid="Example_Where_Clause"/>
    </if>
  </delete>
  <insert id="insert" parameterType="com.sb.dao.interest.model.Interest">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into `sb_interest` (
      `bond_pay_type_id`,
      `bond_period_type_id`,
      `bond_profit_type_id`,
      `rate_type_id`,
      `start_date`,
      `end_date`,
      `period_sum`,
      `year_rate`,
      `securities_id`,
      `issue_price`,
      `par_value`,
      `days_per_year`,
      `is_gen`
    )
    values (
      #{bondPayTypeId,jdbcType=INTEGER},
      #{bondPeriodTypeId,jdbcType=INTEGER},
      #{bondProfitTypeId,jdbcType=INTEGER},
      #{rateTypeId,jdbcType=INTEGER},
      #{startDate,jdbcType=DATE},
      #{endDate,jdbcType=DATE},
      #{periodSum,jdbcType=INTEGER},
      #{yearRate,jdbcType=DECIMAL},
      #{securitiesId,jdbcType=INTEGER},
      #{issuePrice,jdbcType=DECIMAL},
      #{parValue,jdbcType=DECIMAL},
      #{daysPerYear,jdbcType=INTEGER},
      #{isGen,jdbcType=BIT}
    )
  </insert>
  <insert id="insertSelective" parameterType="com.sb.dao.interest.model.Interest">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into `sb_interest`
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="bondPayTypeId != null">
      `bond_pay_type_id`,
      </if>
      <if test="bondPeriodTypeId != null">
      `bond_period_type_id`,
      </if>
      <if test="bondProfitTypeId != null">
      `bond_profit_type_id`,
      </if>
      <if test="rateTypeId != null">
      `rate_type_id`,
      </if>
      <if test="startDate != null">
      `start_date`,
      </if>
      <if test="endDate != null">
      `end_date`,
      </if>
      <if test="periodSum != null">
      `period_sum`,
      </if>
      <if test="yearRate != null">
      `year_rate`,
      </if>
      <if test="securitiesId != null">
      `securities_id`,
      </if>
      <if test="issuePrice != null">
      `issue_price`,
      </if>
      <if test="parValue != null">
      `par_value`,
      </if>
      <if test="daysPerYear != null">
      `days_per_year`,
      </if>
      <if test="isGen != null">
      `is_gen`,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="bondPayTypeId != null">
      #{bondPayTypeId,jdbcType=INTEGER},
      </if>
      <if test="bondPeriodTypeId != null">
      #{bondPeriodTypeId,jdbcType=INTEGER},
      </if>
      <if test="bondProfitTypeId != null">
      #{bondProfitTypeId,jdbcType=INTEGER},
      </if>
      <if test="rateTypeId != null">
      #{rateTypeId,jdbcType=INTEGER},
      </if>
      <if test="startDate != null">
      #{startDate,jdbcType=DATE},
      </if>
      <if test="endDate != null">
      #{endDate,jdbcType=DATE},
      </if>
      <if test="periodSum != null">
      #{periodSum,jdbcType=INTEGER},
      </if>
      <if test="yearRate != null">
      #{yearRate,jdbcType=DECIMAL},
      </if>
      <if test="securitiesId != null">
      #{securitiesId,jdbcType=INTEGER},
      </if>
      <if test="issuePrice != null">
      #{issuePrice,jdbcType=DECIMAL},
      </if>
      <if test="parValue != null">
      #{parValue,jdbcType=DECIMAL},
      </if>
      <if test="daysPerYear != null">
      #{daysPerYear,jdbcType=INTEGER},
      </if>
      <if test="isGen != null">
      #{isGen,jdbcType=BIT},
      </if>
    </trim>
  </insert>
  <resultMap id="BaseResultMap" type="com.sb.dao.interest.model.Interest">
    <id column="id" jdbcType="INTEGER" property="id"/>
    <result column="bond_pay_type_id" jdbcType="INTEGER" property="bondPayTypeId"/>
    <result column="bond_period_type_id" jdbcType="INTEGER" property="bondPeriodTypeId"/>
    <result column="bond_profit_type_id" jdbcType="INTEGER" property="bondProfitTypeId"/>
    <result column="rate_type_id" jdbcType="INTEGER" property="rateTypeId"/>
    <result column="start_date" jdbcType="DATE" property="startDate"/>
    <result column="end_date" jdbcType="DATE" property="endDate"/>
    <result column="period_sum" jdbcType="INTEGER" property="periodSum"/>
    <result column="year_rate" jdbcType="DECIMAL" property="yearRate"/>
    <result column="securities_id" jdbcType="INTEGER" property="securitiesId"/>
    <result column="issue_price" jdbcType="DECIMAL" property="issuePrice"/>
    <result column="par_value" jdbcType="DECIMAL" property="parValue"/>
    <result column="days_per_year" jdbcType="INTEGER" property="daysPerYear"/>
    <result column="is_gen" jdbcType="BIT" property="isGen"/>
  </resultMap>
  <select id="selectByExample" parameterType="com.sb.dao.interest.model.InterestExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <if test="_parameter != null">
      <include refid="Example_Where_Clause"/>
    </if>
    from `sb_interest`
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <include refid="Base_Column_List"/>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List"/>
    from `sb_interest`
    where `id` = #{id,jdbcType=INTEGER}
  </select>
  <select id="countByExample" parameterType="com.sb.dao.interest.model.InterestExample" resultType="java.lang.Integer">
    select count(*) from `sb_interest`
    <if test="_parameter != null">
    <include refid="Example_Where_Clause"/>
    </if>
  </select>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                      #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                      #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    `id`, `bond_pay_type_id`, `bond_period_type_id`, `bond_profit_type_id`, `rate_type_id`, `start_date`, `end_date`, `period_sum`, `year_rate`, `securities_id`, `issue_price`, `par_value`, `days_per_year`, `is_gen`
  </sql>
  <update id="updateByExampleSelective" parameterType="map">
    update `sb_interest`
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause"/>
    </if>
    <set>
      <if test="record.bondPayTypeId != null">
      `bond_pay_type_id` = #{record.bondPayTypeId,jdbcType=INTEGER},
      </if>
      <if test="record.bondPeriodTypeId != null">
      `bond_period_type_id` = #{record.bondPeriodTypeId,jdbcType=INTEGER},
      </if>
      <if test="record.bondProfitTypeId != null">
      `bond_profit_type_id` = #{record.bondProfitTypeId,jdbcType=INTEGER},
      </if>
      <if test="record.rateTypeId != null">
      `rate_type_id` = #{record.rateTypeId,jdbcType=INTEGER},
      </if>
      <if test="record.startDate != null">
      `start_date` = #{record.startDate,jdbcType=DATE},
      </if>
      <if test="record.endDate != null">
      `end_date` = #{record.endDate,jdbcType=DATE},
      </if>
      <if test="record.periodSum != null">
      `period_sum` = #{record.periodSum,jdbcType=INTEGER},
      </if>
      <if test="record.yearRate != null">
      `year_rate` = #{record.yearRate,jdbcType=DECIMAL},
      </if>
      <if test="record.securitiesId != null">
      `securities_id` = #{record.securitiesId,jdbcType=INTEGER},
      </if>
      <if test="record.issuePrice != null">
      `issue_price` = #{record.issuePrice,jdbcType=DECIMAL},
      </if>
      <if test="record.parValue != null">
      `par_value` = #{record.parValue,jdbcType=DECIMAL},
      </if>
      <if test="record.daysPerYear != null">
      `days_per_year` = #{record.daysPerYear,jdbcType=INTEGER},
      </if>
      <if test="record.isGen != null">
      `is_gen` = #{record.isGen,jdbcType=BIT}
      </if>
    </set>
  </update>
  <update id="updateByExample" parameterType="map">
    update `sb_interest`
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause"/>
    </if>
    <set>
      `bond_pay_type_id` = #{record.bondPayTypeId,jdbcType=INTEGER},
      `bond_period_type_id` = #{record.bondPeriodTypeId,jdbcType=INTEGER},
      `bond_profit_type_id` = #{record.bondProfitTypeId,jdbcType=INTEGER},
      `rate_type_id` = #{record.rateTypeId,jdbcType=INTEGER},
      `start_date` = #{record.startDate,jdbcType=DATE},
      `end_date` = #{record.endDate,jdbcType=DATE},
      `period_sum` = #{record.periodSum,jdbcType=INTEGER},
      `year_rate` = #{record.yearRate,jdbcType=DECIMAL},
      `securities_id` = #{record.securitiesId,jdbcType=INTEGER},
      `issue_price` = #{record.issuePrice,jdbcType=DECIMAL},
      `par_value` = #{record.parValue,jdbcType=DECIMAL},
      `days_per_year` = #{record.daysPerYear,jdbcType=INTEGER},
      `is_gen` = #{record.isGen,jdbcType=BIT}
    </set>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.sb.dao.interest.model.Interest">
    update `sb_interest`
    <set>
      <if test="bondPayTypeId != null">
      `bond_pay_type_id` = #{bondPayTypeId,jdbcType=INTEGER}, 
      </if>
      <if test="bondPeriodTypeId != null">
      `bond_period_type_id` = #{bondPeriodTypeId,jdbcType=INTEGER}, 
      </if>
      <if test="bondProfitTypeId != null">
      `bond_profit_type_id` = #{bondProfitTypeId,jdbcType=INTEGER}, 
      </if>
      <if test="rateTypeId != null">
      `rate_type_id` = #{rateTypeId,jdbcType=INTEGER}, 
      </if>
      <if test="startDate != null">
      `start_date` = #{startDate,jdbcType=DATE}, 
      </if>
      <if test="endDate != null">
      `end_date` = #{endDate,jdbcType=DATE}, 
      </if>
      <if test="periodSum != null">
      `period_sum` = #{periodSum,jdbcType=INTEGER}, 
      </if>
      <if test="yearRate != null">
      `year_rate` = #{yearRate,jdbcType=DECIMAL}, 
      </if>
      <if test="securitiesId != null">
      `securities_id` = #{securitiesId,jdbcType=INTEGER}, 
      </if>
      <if test="issuePrice != null">
      `issue_price` = #{issuePrice,jdbcType=DECIMAL}, 
      </if>
      <if test="parValue != null">
      `par_value` = #{parValue,jdbcType=DECIMAL}, 
      </if>
      <if test="daysPerYear != null">
      `days_per_year` = #{daysPerYear,jdbcType=INTEGER}, 
      </if>
      <if test="isGen != null">
      `is_gen` = #{isGen,jdbcType=BIT}
      </if>
    </set>
    where `id` = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.sb.dao.interest.model.Interest">
    update `sb_interest`
    <set>
      `bond_pay_type_id` = #{bondPayTypeId,jdbcType=INTEGER}, 
      `bond_period_type_id` = #{bondPeriodTypeId,jdbcType=INTEGER}, 
      `bond_profit_type_id` = #{bondProfitTypeId,jdbcType=INTEGER}, 
      `rate_type_id` = #{rateTypeId,jdbcType=INTEGER}, 
      `start_date` = #{startDate,jdbcType=DATE}, 
      `end_date` = #{endDate,jdbcType=DATE}, 
      `period_sum` = #{periodSum,jdbcType=INTEGER}, 
      `year_rate` = #{yearRate,jdbcType=DECIMAL}, 
      `securities_id` = #{securitiesId,jdbcType=INTEGER}, 
      `issue_price` = #{issuePrice,jdbcType=DECIMAL}, 
      `par_value` = #{parValue,jdbcType=DECIMAL}, 
      `days_per_year` = #{daysPerYear,jdbcType=INTEGER}, 
      `is_gen` = #{isGen,jdbcType=BIT}
    </set>
    where `id` = #{id,jdbcType=INTEGER}
  </update>
</mapper>
