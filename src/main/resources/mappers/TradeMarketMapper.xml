<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.sb.dao.trademarket.TradeMarketMapper">

  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from `sb_trade_market`
    where `id` = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.sb.dao.trademarket.model.TradeMarketExample">
    delete from `sb_trade_market`
    <if test="_parameter != null">
      <include refid="Example_Where_Clause"/>
    </if>
  </delete>
  <insert id="insert" parameterType="com.sb.dao.trademarket.model.TradeMarket">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into `sb_trade_market` (
      `securities_id`,
      `trade_date`,
      `open_price`,
      `close_price`,
      `min_price`,
      `max_price`,
      `average_price`,
      `q_rice`,
      `j_rice`,
      `yjlx`,
      `wfsy`,
      `rjlx`
    )
    values (
      #{securitiesId,jdbcType=INTEGER},
      #{tradeDate,jdbcType=DATE},
      #{openPrice,jdbcType=DATE},
      #{closePrice,jdbcType=DECIMAL},
      #{minPrice,jdbcType=DECIMAL},
      #{maxPrice,jdbcType=DECIMAL},
      #{averagePrice,jdbcType=DECIMAL},
      #{qRice,jdbcType=DECIMAL},
      #{jRice,jdbcType=DECIMAL},
      #{yjlx,jdbcType=DECIMAL},
      #{wfsy,jdbcType=DECIMAL},
      #{rjlx,jdbcType=DECIMAL}
    )
  </insert>
  <insert id="insertSelective" parameterType="com.sb.dao.trademarket.model.TradeMarket">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into `sb_trade_market`
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="securitiesId != null">
      `securities_id`,
      </if>
      <if test="tradeDate != null">
      `trade_date`,
      </if>
      <if test="openPrice != null">
      `open_price`,
      </if>
      <if test="closePrice != null">
      `close_price`,
      </if>
      <if test="minPrice != null">
      `min_price`,
      </if>
      <if test="maxPrice != null">
      `max_price`,
      </if>
      <if test="averagePrice != null">
      `average_price`,
      </if>
      <if test="qRice != null">
      `q_rice`,
      </if>
      <if test="jRice != null">
      `j_rice`,
      </if>
      <if test="yjlx != null">
      `yjlx`,
      </if>
      <if test="wfsy != null">
      `wfsy`,
      </if>
      <if test="rjlx != null">
      `rjlx`,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="securitiesId != null">
      #{securitiesId,jdbcType=INTEGER},
      </if>
      <if test="tradeDate != null">
      #{tradeDate,jdbcType=DATE},
      </if>
      <if test="openPrice != null">
      #{openPrice,jdbcType=DATE},
      </if>
      <if test="closePrice != null">
      #{closePrice,jdbcType=DECIMAL},
      </if>
      <if test="minPrice != null">
      #{minPrice,jdbcType=DECIMAL},
      </if>
      <if test="maxPrice != null">
      #{maxPrice,jdbcType=DECIMAL},
      </if>
      <if test="averagePrice != null">
      #{averagePrice,jdbcType=DECIMAL},
      </if>
      <if test="qRice != null">
      #{qRice,jdbcType=DECIMAL},
      </if>
      <if test="jRice != null">
      #{jRice,jdbcType=DECIMAL},
      </if>
      <if test="yjlx != null">
      #{yjlx,jdbcType=DECIMAL},
      </if>
      <if test="wfsy != null">
      #{wfsy,jdbcType=DECIMAL},
      </if>
      <if test="rjlx != null">
      #{rjlx,jdbcType=DECIMAL},
      </if>
    </trim>
  </insert>
  <resultMap id="BaseResultMap" type="com.sb.dao.trademarket.model.TradeMarket">
    <id column="id" jdbcType="INTEGER" property="id"/>
    <result column="securities_id" jdbcType="INTEGER" property="securitiesId"/>
    <result column="trade_date" jdbcType="DATE" property="tradeDate"/>
    <result column="open_price" jdbcType="DATE" property="openPrice"/>
    <result column="close_price" jdbcType="DECIMAL" property="closePrice"/>
    <result column="min_price" jdbcType="DECIMAL" property="minPrice"/>
    <result column="max_price" jdbcType="DECIMAL" property="maxPrice"/>
    <result column="average_price" jdbcType="DECIMAL" property="averagePrice"/>
    <result column="q_rice" jdbcType="DECIMAL" property="qRice"/>
    <result column="j_rice" jdbcType="DECIMAL" property="jRice"/>
    <result column="yjlx" jdbcType="DECIMAL" property="yjlx"/>
    <result column="wfsy" jdbcType="DECIMAL" property="wfsy"/>
    <result column="rjlx" jdbcType="DECIMAL" property="rjlx"/>
  </resultMap>
  <select id="selectByExample" parameterType="com.sb.dao.trademarket.model.TradeMarketExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <if test="_parameter != null">
      <include refid="Example_Where_Clause"/>
    </if>
    from `sb_trade_market`
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <include refid="Base_Column_List"/>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List"/>
    from `sb_trade_market`
    where `id` = #{id,jdbcType=INTEGER}
  </select>
  <select id="countByExample" parameterType="com.sb.dao.trademarket.model.TradeMarketExample" resultType="java.lang.Integer">
    select count(*) from `sb_trade_market`
    <if test="_parameter != null">
    <include refid="Example_Where_Clause"/>
    </if>
  </select>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                      #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                      #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    `id`, `securities_id`, `trade_date`, `open_price`, `close_price`, `min_price`, `max_price`, `average_price`, `q_rice`, `j_rice`, `yjlx`, `wfsy`, `rjlx`
  </sql>
  <update id="updateByExampleSelective" parameterType="map">
    update `sb_trade_market`
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause"/>
    </if>
    <set>
      <if test="record.securitiesId != null">
      `securities_id` = #{record.securitiesId,jdbcType=INTEGER},
      </if>
      <if test="record.tradeDate != null">
      `trade_date` = #{record.tradeDate,jdbcType=DATE},
      </if>
      <if test="record.openPrice != null">
      `open_price` = #{record.openPrice,jdbcType=DATE},
      </if>
      <if test="record.closePrice != null">
      `close_price` = #{record.closePrice,jdbcType=DECIMAL},
      </if>
      <if test="record.minPrice != null">
      `min_price` = #{record.minPrice,jdbcType=DECIMAL},
      </if>
      <if test="record.maxPrice != null">
      `max_price` = #{record.maxPrice,jdbcType=DECIMAL},
      </if>
      <if test="record.averagePrice != null">
      `average_price` = #{record.averagePrice,jdbcType=DECIMAL},
      </if>
      <if test="record.qRice != null">
      `q_rice` = #{record.qRice,jdbcType=DECIMAL},
      </if>
      <if test="record.jRice != null">
      `j_rice` = #{record.jRice,jdbcType=DECIMAL},
      </if>
      <if test="record.yjlx != null">
      `yjlx` = #{record.yjlx,jdbcType=DECIMAL},
      </if>
      <if test="record.wfsy != null">
      `wfsy` = #{record.wfsy,jdbcType=DECIMAL},
      </if>
      <if test="record.rjlx != null">
      `rjlx` = #{record.rjlx,jdbcType=DECIMAL}
      </if>
    </set>
  </update>
  <update id="updateByExample" parameterType="map">
    update `sb_trade_market`
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause"/>
    </if>
    <set>
      `securities_id` = #{record.securitiesId,jdbcType=INTEGER},
      `trade_date` = #{record.tradeDate,jdbcType=DATE},
      `open_price` = #{record.openPrice,jdbcType=DATE},
      `close_price` = #{record.closePrice,jdbcType=DECIMAL},
      `min_price` = #{record.minPrice,jdbcType=DECIMAL},
      `max_price` = #{record.maxPrice,jdbcType=DECIMAL},
      `average_price` = #{record.averagePrice,jdbcType=DECIMAL},
      `q_rice` = #{record.qRice,jdbcType=DECIMAL},
      `j_rice` = #{record.jRice,jdbcType=DECIMAL},
      `yjlx` = #{record.yjlx,jdbcType=DECIMAL},
      `wfsy` = #{record.wfsy,jdbcType=DECIMAL},
      `rjlx` = #{record.rjlx,jdbcType=DECIMAL}
    </set>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.sb.dao.trademarket.model.TradeMarket">
    update `sb_trade_market`
    <set>
      <if test="securitiesId != null">
      `securities_id` = #{securitiesId,jdbcType=INTEGER}, 
      </if>
      <if test="tradeDate != null">
      `trade_date` = #{tradeDate,jdbcType=DATE}, 
      </if>
      <if test="openPrice != null">
      `open_price` = #{openPrice,jdbcType=DATE}, 
      </if>
      <if test="closePrice != null">
      `close_price` = #{closePrice,jdbcType=DECIMAL}, 
      </if>
      <if test="minPrice != null">
      `min_price` = #{minPrice,jdbcType=DECIMAL}, 
      </if>
      <if test="maxPrice != null">
      `max_price` = #{maxPrice,jdbcType=DECIMAL}, 
      </if>
      <if test="averagePrice != null">
      `average_price` = #{averagePrice,jdbcType=DECIMAL}, 
      </if>
      <if test="qRice != null">
      `q_rice` = #{qRice,jdbcType=DECIMAL}, 
      </if>
      <if test="jRice != null">
      `j_rice` = #{jRice,jdbcType=DECIMAL}, 
      </if>
      <if test="yjlx != null">
      `yjlx` = #{yjlx,jdbcType=DECIMAL}, 
      </if>
      <if test="wfsy != null">
      `wfsy` = #{wfsy,jdbcType=DECIMAL}, 
      </if>
      <if test="rjlx != null">
      `rjlx` = #{rjlx,jdbcType=DECIMAL}
      </if>
    </set>
    where `id` = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.sb.dao.trademarket.model.TradeMarket">
    update `sb_trade_market`
    <set>
      `securities_id` = #{securitiesId,jdbcType=INTEGER}, 
      `trade_date` = #{tradeDate,jdbcType=DATE}, 
      `open_price` = #{openPrice,jdbcType=DATE}, 
      `close_price` = #{closePrice,jdbcType=DECIMAL}, 
      `min_price` = #{minPrice,jdbcType=DECIMAL}, 
      `max_price` = #{maxPrice,jdbcType=DECIMAL}, 
      `average_price` = #{averagePrice,jdbcType=DECIMAL}, 
      `q_rice` = #{qRice,jdbcType=DECIMAL}, 
      `j_rice` = #{jRice,jdbcType=DECIMAL}, 
      `yjlx` = #{yjlx,jdbcType=DECIMAL}, 
      `wfsy` = #{wfsy,jdbcType=DECIMAL}, 
      `rjlx` = #{rjlx,jdbcType=DECIMAL}
    </set>
    where `id` = #{id,jdbcType=INTEGER}
  </update>
</mapper>
